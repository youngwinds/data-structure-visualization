const path = require('path');
const fs = require('fs');

const languages = ['zh-CN', 'en-US'];

function createLocales(rootPath, key, locales) {
  fs.readdirSync(rootPath).map((dir) => {
    const dirInfo = fs.statSync(path.join(rootPath, dir));
    if (dirInfo.isFile()) {
      return null;
    }

    if (dirInfo.isDirectory()) {
      // 如果存在code文件，则表明当前目录是叶结点。
      const isConfigExist = fs.existsSync(
        path.join(rootPath, dir, 'config.js'),
      );
      const method = require(path.join(rootPath, dir, 'config.js'));

      if (isConfigExist) {
        const locale = {
          key: key + dir,
        };
        for (let v of languages) {
          locale[v] = method[v];
        }
        locales.push(locale);
      }

      createLocales(path.join(rootPath, dir), `${key + dir}_`, locales);
    }
  });

  return locales;
}

function createFile(path, content) {
  if (!fs.existsSync(path)) {
    fs.mkdirSync(path);
  }

  const filePath = path + '/index.ts';
  const fileContent = `// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.\nexport default ${content}`;

  fs.writeFile(filePath, fileContent, function (error) {
    if (error) {
      console.log('Error: generators locales');
    }

    console.log(
      '\x1b[32m%s\x1b[0m%s',
      'Generate Locales Successful: ',
      filePath,
    );
  });
}

function generateLocales(rootPath) {
  fs.access(rootPath, fs.constants.R_OK | fs.constants.W_OK, (err) => {
    console.log('\x1b[35m%s\x1b[0m', 'Start GenerateLocales');

    if (err) {
      throw err;
    }

    const locales = createLocales(rootPath, '', []);

    createFile(
      path.join(__dirname, '../../src/locales/docs'),
      JSON.stringify(locales, null, 2),
    );
  });
}

const rootPath = path.join(__dirname, '../../public/docs');

generateLocales(rootPath);
